{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":19,\"max\":19},\"skills\":{\"hacking\":177,\"strength\":93,\"defense\":93,\"dexterity\":93,\"agility\":93,\"charisma\":152,\"intelligence\":0},\"exp\":{\"hacking\":123466.62385382663,\"strength\":8952.036659020776,\"defense\":8952.036659020776,\"dexterity\":8952.036659020776,\"agility\":8952.036659020776,\"charisma\":56866.212530922174,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.0100003,\"hacking_speed\":1.0100003,\"hacking_money\":1.0100003,\"hacking_grow\":1.0100003,\"hacking\":1.0100003,\"strength\":1.0100003,\"defense\":1.0100003,\"dexterity\":1.0100003,\"agility\":1.0100003,\"charisma\":1.0100003,\"hacking_exp\":1.0100003,\"strength_exp\":1.0100003,\"defense_exp\":1.0100003,\"dexterity_exp\":1.0100003,\"agility_exp\":1.0100003,\"charisma_exp\":1.0100003,\"company_rep\":1.0100003,\"faction_rep\":1.0100003,\"crime_money\":1.0100003,\"crime_success\":1.0100003,\"hacknet_node_money\":1.0100003,\"hacknet_node_purchase_cost\":0.9900987158122627,\"hacknet_node_ram_cost\":0.9900987158122627,\"hacknet_node_core_cost\":0.9900987158122627,\"hacknet_node_level_cost\":0.9900987158122627,\"work_money\":1.0100003,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"money\":16898055.452528458,\"city\":\"Sector-12\",\"location\":\"Carmichael Security\",\"jobs\":{\"Carmichael Security\":\"Software Consultant\",\"Alpha Enterprises\":\"Business Intern\"},\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":1071.8643279308285,\"onlineTimeSeconds\":190248.60000066378,\"ram\":64,\"totalMoneyGenerated\":3732556.0417580884,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":1071.8643279308285,\"onlineTimeSeconds\":190247.60000066378,\"ram\":64,\"totalMoneyGenerated\":3721029.4454177767,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":122.71503645,\"onlineTimeSeconds\":190247.40000066377,\"ram\":1,\"totalMoneyGenerated\":3228698.360023739,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":122.71503645,\"onlineTimeSeconds\":190247.20000066375,\"ram\":1,\"totalMoneyGenerated\":3228346.5769192525,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":122.71503645,\"onlineTimeSeconds\":190246.80000066376,\"ram\":1,\"totalMoneyGenerated\":3228285.3709010724,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":122.71503645,\"onlineTimeSeconds\":190246.80000066376,\"ram\":1,\"totalMoneyGenerated\":3228215.6808803715,\"name\":\"hacknet-node-5\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"NeuroFlux Governor\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"sleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"entropy\":0,\"lastUpdate\":1664905292135,\"lastSave\":1664905265947,\"totalPlaytime\":265885200,\"playtimeSinceLastAug\":238745200,\"playtimeSinceLastBitnode\":265885200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-5532096,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":14097825.999273095,\"hacknet\":20367131.476386856,\"hacknet_expenses\":-12429076.555243216,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":16897025.452528417,\"work\":1602984.4041342153,\"servers\":-1009743.8720000001,\"other\":-200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-30216,\"class\":-6010680,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":15537406.92777034,\"hacknet\":25533236.17616309,\"hacknet_expenses\":-13311871.326806763,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":20127331.469439693,\"work\":1779199.564134192,\"servers\":-1119743.872,\"other\":-1500000,\"augmentations\":-750000}},\"scriptProdSinceLastAug\":5543687,\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1664640197781},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1664640377776},{\"ID\":\"WORKOUT\",\"unlockedOn\":1664647700772},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1664649921780},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1664650581790},{\"ID\":\"TRAVEL\",\"unlockedOn\":1664656321326},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1664657521314},{\"ID\":\"TOR\",\"unlockedOn\":1664658001322},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1664661720425},{\"ID\":\"FROZE\",\"unlockedOn\":1664661720453},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1664666547809},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1664893166698}],\"terminalCommandHistory\":[\"scan-analyze 5\",\"analyze\",\"home\",\"run getRoot.js\",\"scan\",\"scan-analyze 3\",\"run getRoot.js\",\"scan-analyze 3\",\"connect iron-gym\",\"connect CSEC\",\"analyze\",\"run getRoot.js\",\"home\",\"run getRoot.js\",\"ls\",\"run w0rm.js\",\"analyze\",\"run w0rm.js\",\"help\",\"mem w0rm.js\",\"run w0rm.js\",\"scan-analyze 5\",\"ps\",\"help\",\"home\",\"run w0rm.js\",\"nano w0rm.js\",\"run w0rm.js\",\"scan-analyze\",\"backdoor\",\"scan-analyze 2\",\"backdoor\",\"weaken\",\"backdoor\",\"scan-analyze 2\",\"home\",\"scan-analyze 2\",\"analyze\",\"backdoor\",\"home\",\"scan-analyze 5\",\"backdoor\",\"analyze\",\"weaken\",\"backdoor\",\"home\",\"connect darkweb\",\"buy -l\",\"home\",\"run w0rm.js\"],\"focus\":false,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":108,\"factionWorkType\":\"FIELD\",\"factionName\":\"Sector-12\"}},\"identifier\":\"1ef4c62a72eb54\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"47.1.9.2\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"AutoLink.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\twhile(true) {\\n\\t\\tawait ns.hack('n00dles');\\n\\t}\\n}\",\"filename\":\"n00dles.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"n00dles.js\",\"url\":\"blob:file:///97adf83c-f83e-413e-abdb-ba5cf5ecd748\",\"moduleSequenceNumber\":6}],\"dependents\":[],\"ramUsage\":1.7,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":33,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastserver = \\\"home\\\"\\r\\n    const currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    let netview = \\\"Testfile.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n    if (ns.args.length >= 1) {\\r\\n        startserver = ns.args[0];\\r\\n        if (ns.args[1] === undefined) {\\r\\n            lastserver = ns.args[1];\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(startserver);\\r\\n    ns.tprint(servers);\\r\\n    servers = servers.filter(item => item !== \\\"home\\\")\\r\\n    servers = servers.filter(item => item !== lastserver)\\r\\n    ns.tprint(servers);\\r\\n\\tlet server = servers[0]\\r\\n\\tif (ns.scp(netview, server)) {\\r\\n\\t\\tns.exec(netview, server, 1, server, currentServer);\\r\\n\\t\\tns.tprint(\\\"Server \\\"+ server + \\\" successfully started \\\" + netview + \\\" script\\\");\\r\\n\\t}\\r\\n}\",\"filename\":\"Testfile.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"Testfile.js\",\"url\":\"blob:file:///ee7b046b-a958-44fa-a00f-6153101a4f25\",\"moduleSequenceNumber\":416}],\"dependents\":[],\"ramUsage\":3.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":34,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"getRoot.js\",\"url\":\"blob:file:///c383d9cb-fa94-4d7b-a0b8-eede975f762e\",\"moduleSequenceNumber\":1123}],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":35,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns){\\r\\n    ns.home\\r\\n} \",\"filename\":\"getRootAllMachinesICanConnect.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":36,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"server = args[0];\\r\\nexport async function main(ns) {\\r\\n    while(true) {\\r\\n        if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n\\r\\n}\",\"filename\":\"WeakHack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":37,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":38,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/**\\r\\n* @param {NS} ns\\r\\n**/\\r\\nlet netview = \\\"autohack.js\\\"\\r\\n\\r\\nfunction AutoHack(ns, Server) {\\r\\n    const hostname = Server.hostname\\r\\n    ns.tprint(\\\"AutoHack function Started on \\\" + hostname)\\r\\n    //Kill script if already running on the server\\r\\n    if (ns.scriptRunning(netview, hostname)) {\\r\\n        ns.scriptKill(netview, hostname)\\r\\n        ns.tprint(\\\"Killing \\\" + netview + \\\" on server \\\" + hostname)\\r\\n    }\\r\\n    //Replace autohack script with newer version\\r\\n    if (ns.fileExists(netview, hostname)) {\\r\\n        ns.rm(netview, hostname);\\r\\n        ns.tprint(\\\"Deleting \\\" + netview + \\\" on server \\\" + hostname)\\r\\n    }\\r\\n    //Transmit script to server and run\\r\\n    if (ns.scp(netview, hostname)) {\\r\\n        ns.exec(netview, hostname, 1, hostname)\\r\\n        Server.connectedServers.forEach(cserver => {\\r\\n            if (ns.hasRootAccess(cserver)) {\\r\\n                ns.exec(netview, hostname, 1, cserver)\\r\\n                ns.tprint(\\\"Running \\\" + netview + \\\" on server \\\" + hostname + \\\" Target: \\\" + cserver)\\r\\n            }\\r\\n        });\\r\\n        ns.tprint(ns.ps(hostname))\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nexport async function main(ns){\\r\\n    ns.tprint(\\\"Running server W0RM\\\");\\r\\n    let servers = ns.scan(ns.getHostname());\\r\\n    let i = 0\\r\\n    let DiscoveredServer = \\\"\\\"\\r\\n    let icanssh = false\\r\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {icanssh = true; ns.tprint(\\\"SSH is available\\\")}\\r\\n    let icanftp = false\\r\\n    if (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {icanftp = true; ns.tprint(\\\"FTP is available\\\")}\\r\\n    let icansmtp = false\\r\\n    if (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {icansmtp = true; ns.tprint(\\\"SMTP is available\\\")}\\r\\n    let icanhttp = false\\r\\n    if (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {icanhttp = true; ns.tprint(\\\"HTTP is available\\\")}\\r\\n    let icansql = false\\r\\n    if (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {icansql = true; ns.tprint(\\\"SQL is available\\\")}\\r\\n        \\r\\n    //ns.tprint(\\\"Servers: \\\" + servers);\\r\\n    while (servers.length > i) {\\r\\n        DiscoveredServer = servers[i++];\\r\\n        //ns.tprint(DiscoveredServer);\\r\\n        //ns.tprint(\\\"Running scan on: \\\" + DiscoveredServer);\\r\\n        ns.scan(DiscoveredServer).forEach(NewServer => {\\r\\n            if (!servers.includes(NewServer)) {\\r\\n                //ns.tprint(\\\"Found New Server: \\\" + NewServer);\\r\\n                servers.push(NewServer);\\r\\n                //ns.tprint(\\\"Server \\\" + NewServer + \\\" Added to servers list\\\");\\r\\n            }\\r\\n        });\\r\\n    }\\r\\n    //ns.tprint(\\\"###############  RESULTS  #######################\\\")\\r\\n    servers.splice(servers.indexOf(\\\"home\\\"), 1);\\r\\n    //ns.tprint(servers);\\r\\n    servers.forEach(server => {\\r\\n        let ServerInfo = ns.getServer(server)\\r\\n        ServerInfo.connectedServers = ns.scan(ServerInfo.hostname)\\r\\n        if (ServerInfo.connectedServers.includes(\\\"home\\\")) {\\r\\n            ServerInfo.connectedServers.splice(ServerInfo.connectedServers.indexOf(\\\"home\\\"), 1)\\r\\n        }\\r\\n        //ns.tprint(ServerInfo);\\r\\n        //ns.tprint(\\\"Analysis of: \\\" + ServerInfo.hostname);\\r\\n        if (!ServerInfo.hasAdminRights) {\\r\\n            if (ServerInfo.numOpenPortsRequired > ServerInfo.openPortCount) {\\r\\n                //ns.tprint(\\\"Number of Open Ports: \\\" + ServerInfo.openPortCount + \\\"/\\\" + ServerInfo.numOpenPortsRequired + \\\" required\\\");\\r\\n                // SSH port\\r\\n                if (!ServerInfo.sshPortOpen && icanssh) {\\r\\n                    ns.brutessh(ServerInfo.hostname)\\r\\n                    ServerInfo.openPortCount += 1;\\r\\n                    //ns.tprint(ServerInfo.hostname + \\\" - SSH Port: \\\" + ServerInfo.sshPortOpen)\\r\\n                }\\r\\n                // FTP port\\r\\n                if (!ServerInfo.ftpPortOpen && icanftp) {\\r\\n                    ns.ftpcrack(ServerInfo.hostname)\\r\\n                    ServerInfo.openPortCount += 1;\\r\\n                    //ns.tprint(ServerInfo.hostname + \\\" - FTP Port:\\\" + ServerInfo.ftpPortOpen)\\r\\n                }\\r\\n                // SMTP port\\r\\n                if (!ServerInfo.smtpPortOpen && icansmtp) {\\r\\n                    ns.relaysmtp(ServerInfo.hostname)\\r\\n                    ServerInfo.openPortCount += 1;\\r\\n                    //ns.tprint(ServerInfo.hostname + \\\" - SMTP Port:\\\" + ServerInfo.smtpPortOpen)\\r\\n                }\\r\\n                // HTTP port\\r\\n                if (!ServerInfo.httpPortOpen && icanhttp) {\\r\\n                    ns.httpworm(ServerInfo.hostname)\\r\\n                    ServerInfo.openPortCount += 1;\\r\\n                    //ns.tprint(ServerInfo.hostname + \\\" - HTTP Port:\\\" + ServerInfo.httpPortOpen)\\r\\n                }\\r\\n                // SQL port\\r\\n                if (!ServerInfo.sqlPortOpen && icansql) {\\r\\n                    ns.sqlinject(ServerInfo.hostname)\\r\\n                    ServerInfo.openPortCount += 1;\\r\\n                    //ns.tprint(ServerInfo.hostname + \\\" - SQL Port:\\\" + ServerInfo.sqlPortOpen)\\r\\n                }\\r\\n            }\\r\\n            // Try NUKE to get Root\\r\\n            if (!ServerInfo.hasAdminRights && (ServerInfo.openPortCount >= ServerInfo.numOpenPortsRequired)) {\\r\\n                ns.nuke(ServerInfo.hostname)\\r\\n                ServerInfo.hasAdminRights = ns.hasRootAccess(ServerInfo.hostname)\\r\\n                ns.tprint(\\\"NUKED: \\\" + ServerInfo.hostname);\\r\\n            }            \\r\\n        }\\r\\n        if (ServerInfo.hasAdminRights) {\\r\\n            ns.tprint(ServerInfo.hostname + \\\" Root Access Found\\\")\\r\\n            //ns.tprint(ServerInfo.hostname + \\\" would start \\\" + netview);\\r\\n            AutoHack(ns, ServerInfo);\\r\\n        } else {\\r\\n            ns.print(ServerInfo.hostname + \\\" Root Access could not be obtained\\\");\\r\\n            ns.print(ServerInfo.hostname + \\\" Information: \\\");\\r\\n            ns.print(\\\"IP: \\\" + ServerInfo.ip);\\r\\n            ns.print(\\\"Level: \\\" + ServerInfo.requiredHackingSkill);\\r\\n            ns.print(\\\"Ports: \\\" + ServerInfo.openPortCount + \\\"/\\\" + ServerInfo.numOpenPortsRequired);\\r\\n            ns.print(\\\"SSH: \\\" + ServerInfo.sshPortOpen + \\\" - \\\" + icanssh);\\r\\n            ns.print(\\\"FTP: \\\" + ServerInfo.ftpPortOpen + \\\" - \\\" + icanftp);\\r\\n            ns.print(\\\"HTTP: \\\" + ServerInfo.httpPortOpen + \\\" - \\\" + icanhttp);\\r\\n            ns.print(\\\"SMTP: \\\" + ServerInfo.smtpPortOpen + \\\" - \\\" + icansmtp);\\r\\n            ns.print(\\\"SQL: \\\" + ServerInfo.sqlPortOpen + \\\" - \\\" + icansql);\\r\\n            ns.print(\\\"                                                          \\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"w0rm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"w0rm.js\",\"url\":\"blob:file:///e7231f52-ebea-4a22-afcb-64551ba3c73f\",\"moduleSequenceNumber\":195}],\"dependents\":[],\"ramUsage\":9.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":195,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ps\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-608664.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"60902509\",-72],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"76.4.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":37523744673,\"moneyMax\":938093616825,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1264,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"94.4.9.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":57612743914,\"moneyMax\":1440318597850,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1269,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"5.5.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":26457111292,\"moneyMax\":661427782300,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1081,\"serverGrowth\":76}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-853945.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"mhhhhmld22pppppUUUUUUUUUUlyMMnhhAHNNIIYYYY22zzzzzzzyyyyyyyyyyyyyERR2wRS1BB\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"84.4.8.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":18390811907,\"moneyMax\":459770297675,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1123,\"serverGrowth\":83}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"22.6.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":30843636520,\"moneyMax\":771090913000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":955,\"serverGrowth\":85}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"23.7.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":15282089299,\"moneyMax\":382052232475,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1166,\"serverGrowth\":47}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-818301.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[71,200,62,107,184,44,136,143,78,117,94,107,10,151,158,118,179,143,9,120,85,78,188,121,197,164,155,30,170,150,84,141,109,72,175,106,186,183,122,182,167,199,59,24,144,15],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-486842-CarmichaelSecurity.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":155316481650185,\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"68.1.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":16889703375,\"moneyMax\":422242584375,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1041,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"88.4.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":18096738237,\"moneyMax\":452418455925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1139,\"serverGrowth\":94}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-41769.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"t2ETTTT6SwwwwCCCCCCCCCCCCHHtwwXyyuuP5vxESSDDY88mmi6f33333333333333Wlllllllll33lnnn\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-383868.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":549267278875339,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-542764.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"wk3COMR8SOOOOOOOOOOL8TJuFOOOL8TJunuago2zgo2zgoKJnqUbSlPbSlPbSlt0iWiWiW\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"39.3.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":27509796970,\"moneyMax\":687744924250,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1044,\"serverGrowth\":99}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"89.3.7.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":1721312145,\"moneyMax\":43032803625,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1026,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-11185.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[57,13,193,168,188,6,46,69,102,90,25,81,117,41,112,78,54,118,163,7,93,134,21,61,152,19,155,68,157,95,18,184,105,166,9,132,85,46,11,20,13,8,136,188,166,19,31,181,45]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"62.7.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1161,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-443836.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2102916169\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"22.4.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1011868481,\"moneyMax\":25296712025,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":953,\"serverGrowth\":82}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"58.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":929077275,\"moneyMax\":23226931875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":955,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"60.4.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":857763525,\"moneyMax\":21444088125,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":948,\"serverGrowth\":71}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"94.8.3.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":600763183,\"moneyMax\":15019079575,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":867,\"serverGrowth\":79}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-713695.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,0,9,0,8,2,3,0,0,0],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"21.0.9.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":772395421,\"moneyMax\":19309885525,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":813,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"15.9.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":959403035,\"moneyMax\":23985075875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":867,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"40.8.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1113971020,\"moneyMax\":27849275500,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":835,\"serverGrowth\":82}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-197546.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100000010000000101001101100101001101100100110011100100011110111\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"54.8.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":867927595,\"moneyMax\":21698189875,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":860,\"serverGrowth\":79}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"81.4.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":538812197,\"moneyMax\":13470304925,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":840,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"69.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":803686969,\"moneyMax\":20092174225,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":873,\"serverGrowth\":72}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56493-CarmichaelSecurity.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5516013888\",23],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-252353.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[126,145,48,14,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"92.3.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":832697094,\"moneyMax\":20817427350,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":836,\"serverGrowth\":70}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"15.9.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1183055630,\"moneyMax\":29576390750,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":879,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"46.3.5.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":990608420,\"moneyMax\":24765210500,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":914,\"serverGrowth\":65}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-242890.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[8,7],[44,5],[42,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"76.9.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":980149745,\"moneyMax\":24503743625,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":789,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"90.5.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":823056242,\"moneyMax\":20576406050,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":785,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"27.2.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":864456579,\"moneyMax\":21611414475,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":759,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-240999.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[2,5],[3,5],[3,7],[1,3],[2,5],[1,4],[1,2],[6,7],[4,5]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"15.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1455767654,\"moneyMax\":36394191350,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":878,\"serverGrowth\":57}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-30252.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[36,[1,2,3,6,8,9,12,13,14]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"35.0.3.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1597055272,\"moneyMax\":39926381800,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":779,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"49.3.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1234606161,\"moneyMax\":30865154025,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":778,\"serverGrowth\":74}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151816-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,3,3,0,8,0,8,3,2,5,0,4,7,10,0,10,6,8,2,4,9,0],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"46.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1409536651,\"moneyMax\":35238416275,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":843,\"serverGrowth\":80}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"25.3.1.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1087865661,\"moneyMax\":27196641525,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":813,\"serverGrowth\":71}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"86.8.4.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":758628026,\"moneyMax\":18965700650,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":716,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-755438.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-1,-3,-9,-4,-5,8,10,10,-9,10,-3,8],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"29.0.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":573046487,\"moneyMax\":14326162175,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":504,\"serverGrowth\":40}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"65.5.5.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":614092018,\"moneyMax\":15352300450,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":528,\"serverGrowth\":57}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"88.6.0.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":387908373,\"moneyMax\":9697709325,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":401,\"serverGrowth\":40}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"38.6.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":215988053,\"moneyMax\":5399701325,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":386,\"serverGrowth\":41}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"34.9.9.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"the-hub\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":923163627,\"moneyMax\":23079090675,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":744,\"serverGrowth\":78}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"3.4.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":209249581,\"moneyMax\":5231239525,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":466,\"serverGrowth\":49}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"98.1.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":567297081,\"moneyMax\":14182427025,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":582,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-544833.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"xllrr00KKrMraaaaaaabbdddddddBBBBBphhhhhYYkCCCCC666666666666k666666w6666\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557276.cct\",\"type\":\"Total Ways to Sum\",\"data\":54,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"92.7.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":376070703,\"moneyMax\":9401767575,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":427,\"serverGrowth\":51}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564113.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[169,38,11,85,186,43,43,151,168,42,198,70,60,177,142,115,156,58,6,194,125,187,168,58,122,185,189,81,130,130,78,34,173,33,180,149,195,59,95,130,132,50,109,184,53,152]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"60.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":77,\"ramUsage\":2.55,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":78,\"ramUsage\":2.55,\"server\":\"the-hub\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///5840a0c9-e50a-4ba9-b636-bcc9c3e36009\",\"moduleSequenceNumber\":688}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":42,\"minDifficulty\":14,\"moneyAvailable\":174513642,\"moneyMax\":4362841050,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":296,\"serverGrowth\":53}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"87.4.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":235609419,\"moneyMax\":5890235475,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":360,\"serverGrowth\":54}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-35898.cct\",\"type\":\"Total Ways to Sum\",\"data\":41,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"52.8.8.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":390,\"serverGrowth\":63}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"44.8.3.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":666,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":41,\"minDifficulty\":14,\"moneyAvailable\":72822651,\"moneyMax\":1820566275,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":294,\"serverGrowth\":35}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-695411.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[11,7],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-150884.cct\",\"type\":\"Total Ways to Sum\",\"data\":52,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"42.7.3.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":42,\"ramUsage\":2.55,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":42,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///f72db70e-cdef-4b49-8161-48d0b806ec60\",\"moduleSequenceNumber\":673}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":673,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1721020,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"57.4.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":43,\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":44,\"ramUsage\":2.55,\"server\":\"foodnstuff\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"getRoot.js\",\"url\":\"blob:file:///5681fd60-2a89-4239-9634-c9e6048c7936\",\"moduleSequenceNumber\":1136}],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":44,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///197bd697-205d-481a-8251-3284fe938098\",\"moduleSequenceNumber\":674}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":674,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.000000000000001,\"minDifficulty\":3,\"moneyAvailable\":2957112.851008322,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"34.6.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":45,\"ramUsage\":2.55,\"server\":\"sigma-cosmetics\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"getRoot.js\",\"url\":\"blob:file:///d70eea0d-29d4-4f1d-a0ed-2f54db66b0b3\",\"moduleSequenceNumber\":1137}],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":46,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///04305435-f093-4ac2-8b5d-11d850ee1848\",\"moduleSequenceNumber\":675}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":675,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":3.924000000000001,\"minDifficulty\":3,\"moneyAvailable\":4636914.427172072,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-438156.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[9,8],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-305469.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[7,17],[11,19],[5,15],[12,22],[16,22],[25,29],[22,24],[3,5],[14,15],[25,33],[3,8],[15,25],[8,11]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"89.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":46,\"ramUsage\":2.55,\"server\":\"joesguns\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"getRoot.js\",\"url\":\"blob:file:///4b3f3b26-1736-4f59-ae62-54fd99743709\",\"moduleSequenceNumber\":1138}],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":48,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///ce809780-026d-4257-973b-989a79b48cb6\",\"moduleSequenceNumber\":676}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":676,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.787999999999913,\"minDifficulty\":5,\"moneyAvailable\":6837368.24318553,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-874955.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[52,164,199,34,72,118,186,92,37,5],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"10.4.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":53,\"ramUsage\":2.55,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":54,\"ramUsage\":2.55,\"server\":\"zer0\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///79bdd815-3592-44a8-8b7d-42b773b0c2d5\",\"moduleSequenceNumber\":680}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":680,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":24.9,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-907771.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,1,0,1,0,0,1],[0,0,1,0,0,0,0,0],[0,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,0],[0,1,0,1,0,0,1,1],[0,1,0,0,1,1,1,0],[0,1,0,1,0,0,1,0],[0,1,1,0,0,0,0,0],[0,0,0,0,1,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"81.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":10.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":58,\"ramUsage\":2.55,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":59,\"ramUsage\":2.55,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":60,\"ramUsage\":2.55,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":61,\"ramUsage\":2.55,\"server\":\"nectar-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///d3dde60f-342b-4309-bf05-801bbd3e02de\",\"moduleSequenceNumber\":682}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":18.799999999999983,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"43.8.1.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":75,\"ramUsage\":2.55,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":76,\"ramUsage\":2.55,\"server\":\"neo-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///b0af04b9-6b66-4366-9f93-49dbb68bf6f4\",\"moduleSequenceNumber\":687}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":687,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"computek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":24.799999999999997,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"31.9.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":10.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":67,\"ramUsage\":2.55,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":68,\"ramUsage\":2.55,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":69,\"ramUsage\":2.55,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":70,\"ramUsage\":2.55,\"server\":\"silver-helix\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///c2b8e024-23e5-49e5-93bd-1dcffcb400fb\",\"moduleSequenceNumber\":685}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":685,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-467282-AlphaEnterprises.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9yEJzQppqh4336VV980432kh341w860737f6uBfbU856uzpjRm442uG952Qs591G\",\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"33.9.2.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":47,\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":48,\"ramUsage\":2.55,\"server\":\"hong-fang-tea\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"getRoot.js\",\"url\":\"blob:file:///e971fea6-72ab-47b5-9c54-5c5e9945a6e2\",\"moduleSequenceNumber\":1139}],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":54,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///c5420557-942f-4b8f-baf3-9375ebd62f49\",\"moduleSequenceNumber\":677}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":677,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.619999999999932,\"minDifficulty\":5,\"moneyAvailable\":5040727.539178229,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"51.0.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":49,\"ramUsage\":2.55,\"server\":\"harakiri-sushi\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n\\r\\n    let startserver = \\\"home\\\"\\r\\n    let lastservers = [\\\"home\\\"]\\r\\n    let currentServer = ns.getHostname()\\r\\n    ns.tprint(\\\"Currently running on Server: \\\" + currentServer);\\r\\n    // Declare names of refrenced scripts\\r\\n    let netview = \\\"getRoot.js\\\"\\r\\n    let autohack = \\\"autohack.js\\\"\\r\\n\\r\\n    //Args processing\\r\\n    if (ns.args.length >= 0) {\\r\\n        //startserver = ns.args[0];\\r\\n        //ns.tprint(\\\"argument length is \\\" + ns.args.length);\\r\\n        for (let i = 0; i <= (ns.args.length-1); i++) {\\r\\n            //ns.tprint(ns.args[i] + \\\" - \\\" + i);\\r\\n            lastservers.push(ns.args[i]);\\r\\n        }\\r\\n    }\\r\\n\\tlet servers = ns.scan(currentServer);\\r\\n    lastservers.forEach(lastserver => {\\r\\n        servers = servers.filter(item => item !== lastserver)\\r\\n    })\\r\\n    if (!lastservers.includes(currentServer)) {\\r\\n        lastservers.push(currentServer);\\r\\n        //ns.tprint(lastservers)\\r\\n    }\\r\\n    if (servers.length === 0) {\\r\\n        ns.exit()\\r\\n    }\\r\\n    ns.tprint(servers);\\r\\n\\tservers.forEach(server => {\\r\\n        ns.tprint(\\\"Using \\\" + server + \\\":\\\");\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == false) {\\r\\n            if (ns.getServerNumPortsRequired(server) == 0) {\\r\\n                ns.nuke(server);\\r\\n                //ns.installBackdoor(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            } else if (ns.getServerNumPortsRequired(server) <= 2){\\r\\n                ns.ftpcrack(server);\\r\\n                ns.brutessh(server);\\r\\n                ns.nuke(server);\\r\\n                ns.tprint(\\\"Server: \\\" + server + \\\" Rooted succesfully.\\\");\\r\\n            }\\r\\n        }\\r\\n        if (server != \\\"home\\\" && ns.hasRootAccess(server) == true) {\\r\\n            //if Rooted, start remote getRoot & autohack\\r\\n            //ns.tprint(\\\"Server \\\"+ server + \\\" is Rooted.\\\");\\r\\n            if (ns.fileExists(netview, server)) {\\r\\n                ns.rm(netview, server);\\r\\n            }\\r\\n            if (ns.scp(netview, server)) {\\r\\n                //ns.tprint(lastservers)\\r\\n                //ns.tprint(\\\"Starting scan on Server: \\\"+ server + \\\" with parameters: \\\" + lastservers);\\r\\n                ns.exec(netview, server, 1, server, ...lastservers);\\r\\n                //ns.tprint(\\\"Server \\\"+ server + \\\" successfully started GetRoot script\\\");\\r\\n            }\\r\\n            if (ns.isRunning(autohack, server, 1 , server)) {\\r\\n                //ns.tprint(\\\"Attempt to kill autohack.js on \\\" + server)\\r\\n                if (ns.scriptKill(autohack, server)) {\\r\\n                    //ns.tprint(\\\"Server \\\"+ server + \\\" successfully killed \\\" + autohack);\\r\\n                }\\r\\n            }\\r\\n            if (ns.scp(autohack, server)) {\\r\\n                ns.exec(autohack, server, 1, server);\\r\\n                ns.tprint(\\\"Server \\\"+ server + \\\" successfully deployed \\\" + autohack + \\\" script\\\");\\r\\n            } else {\\r\\n                ns.tprint(\\\"ERROR: \\\"+ server + \\\" could not upload \\\" + autohack + \\\" script\\\");\\r\\n            }\\r\\n        }else {\\r\\n            ns.tprint(\\\"Server \\\"+ server + \\\" failed to Root.\\\");\\r\\n        }\\r\\n    });\\r\\n}\",\"filename\":\"getRoot.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"getRoot.js\",\"url\":\"blob:file:///f23a3e19-1478-4b51-bfbc-1daa691de6a8\",\"moduleSequenceNumber\":1140}],\"dependents\":[],\"ramUsage\":6.25,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":56,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getServerNumPortsRequired\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"isRunning\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///e5f3d1ed-b722-4bea-94e3-88695868ba49\",\"moduleSequenceNumber\":678}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":678,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":5.487999999999946,\"minDifficulty\":5,\"moneyAvailable\":8217549.572295618,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-473652.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"bGO5GO5GOjjjjjjjjjFjjj2Txjj2Txjj2Tj2Txjjj2Tj2Tj2T4mf\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-751684-CarmichaelSecurity.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,1,0,0,0,1,1],[0,0,0,0,1,0,0,1,0],[0,0,0,0,0,1,0,0,1],[1,1,0,1,1,0,0,0,0],[0,0,0,1,1,0,0,0,0],[1,0,0,1,0,1,1,1,0],[0,0,1,1,0,0,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"28.4.7.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":7.6499999999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":71,\"ramUsage\":2.55,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":72,\"ramUsage\":2.55,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":73,\"ramUsage\":2.55,\"server\":\"phantasy\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///5a679a36-0829-4838-be09-4bd8bfb30bdf\",\"moduleSequenceNumber\":686}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":686,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":20,\"hackDifficulty\":19.749999999999996,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"24.4.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":7.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":55,\"ramUsage\":2.55,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":56,\"ramUsage\":2.55,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":57,\"ramUsage\":2.55,\"server\":\"max-hardware\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///f6ff2912-5a5b-4acf-9676-e6b2756951d0\",\"moduleSequenceNumber\":681}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":681,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.699999999999996,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"12.0.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":5.1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":65,\"ramUsage\":2.55,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":66,\"ramUsage\":2.55,\"server\":\"omega-net\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///2be1f360-b568-43f8-bab8-26f5eae4440a\",\"moduleSequenceNumber\":684}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":684,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":68858450,\"moneyMax\":1721461250,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":209,\"serverGrowth\":38}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-500073.cct\",\"type\":\"Array Jumping Game\",\"data\":[9,1,4,0,6,8,1,10,2,0,10,10,10,0,0,9,3,3,7,1,3,4,3,1],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"5.9.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":668,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":38,\"hackDifficulty\":38,\"minDifficulty\":13,\"moneyAvailable\":59398431,\"moneyMax\":1484960775,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":229,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-321015.cct\",\"type\":\"Total Ways to Sum\",\"data\":40,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-347759-CarmichaelSecurity.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,1,0,0,0,0],[0,0,0,0,1,0],[0,0,0,0,1,0],[0,1,0,0,1,0],[0,0,1,0,1,0],[0,1,0,0,0,0],[0,0,1,1,1,0],[1,0,0,1,0,1],[1,0,1,0,0,0],[1,0,0,0,0,0],[1,1,1,0,0,0],[0,0,1,0,0,0]],\"reward\":{\"name\":\"Carmichael Security\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"48.1.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":7.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":50,\"ramUsage\":2.55,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":51,\"ramUsage\":2.55,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":52,\"ramUsage\":2.55,\"server\":\"iron-gym\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///a2537ccf-143a-4e29-aa4c-f402f01082d0\",\"moduleSequenceNumber\":679}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":679,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-577799-AlphaEnterprises.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,6,4,4,1,1,4,4,3,0,4,6,3,3,1,3,3,2,6,2],\"reward\":{\"name\":\"Alpha Enterprises\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"76.4.8.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":508,\"serverGrowth\":29}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-340671.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1010101011110110010111000100111010101100010000010000010111111100\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"26.9.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":979,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-822926.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[162,151,55,5,32,8,76,44,49,162,137,50,50,47,38,85,132,101,116,5,179,158,36,135,13],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-982446.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[110,168,147,63,106,52,160,143,122,67,181,10,20,82,69,41,142,54,39,155,199,31,114,146,147,88,164,66,39,123,77,200,63,24,200,151,116,153,23,111,199,19,26,178,102,158],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"55.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":760,\"serverGrowth\":58}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-451043.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,1,0,0,0,1],[1,1,0,0,0,0,0,1,1,0,1],[0,1,0,0,1,0,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,0,0],[0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,1],[0,1,1,0,0,1,1,0,0,0,0],[0,0,0,0,0,1,0,0,0,1,0],[0,1,0,0,0,0,0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"62.4.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":529,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"32.2.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":2,\"requiredHackingSkill\":354,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-541679.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[7,-9,6,8,-1,-10,4,9],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"4.7.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":2.55,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":80,\"ramUsage\":2.55,\"server\":\"avmnite-02h\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///63568bb3-9389-4558-9090-09d8ae867e3d\",\"moduleSequenceNumber\":689}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"summit-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":210,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"96.2.6.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":542,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"86.3.0.6\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.65,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"CSEC\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":62,\"ramUsage\":2.55,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":63,\"ramUsage\":2.55,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"autohack.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":38.21000000000001,\"pid\":64,\"ramUsage\":2.55,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\r\\n    let server = ns.args[0];\\r\\n    while(true) {\\r\\n        if (ns.getServerSecurityLevel(server) > (ns.getServerMinSecurityLevel(server)+1)) {\\r\\n            await ns.weaken(server);\\r\\n        } else if (ns.getServerMoneyAvailable(server) < (ns.getServerMaxMoney(server)-(ns.getServerMaxMoney(server)/30))) {\\r\\n            await ns.grow(server)\\r\\n        } else if (ns.getServerRequiredHackingLevel(server)<=ns.getHackingLevel()){\\r\\n            await ns.weaken(server);\\r\\n            await ns.hack(server);\\r\\n        } else {\\r\\n            break;\\r\\n        }\\r\\n\\t}\\r\\n}\",\"filename\":\"autohack.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"autohack.js\",\"url\":\"blob:file:///58f1efcf-cf5c-4632-b1bb-a42611f81110\",\"moduleSequenceNumber\":683}],\"dependents\":[],\"ramUsage\":2.55,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getHackingLevel\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":59,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-678110.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":919963495,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"20.6.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"99.4.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"30.2.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.4183,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1850.8566852905526,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1382.4002360849736,\"favor\":0.0889,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.0507,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":487.46355481440116}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":1.7292999999999998,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":183.69510513729233}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":2.2561999999999998,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":27.285689944760573}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"theme\":{\"primarylight\":\"#28CF28\",\"primary\":\"#21A821\",\"primarydark\":\"#177317\",\"successlight\":\"#1CFF1C\",\"success\":\"#16CA16\",\"successdark\":\"#0D910D\",\"errorlight\":\"#FF3B3B\",\"error\":\"#C32D2D\",\"errordark\":\"#8E2121\",\"secondarylight\":\"#B3B3B3\",\"secondary\":\"#838383\",\"secondarydark\":\"#676767\",\"warninglight\":\"#FFFF3A\",\"warning\":\"#C3C32A\",\"warningdark\":\"#8C8C1E\",\"infolight\":\"#64CBFF\",\"info\":\"#3399CC\",\"infodark\":\"#246D91\",\"welllight\":\"#404040\",\"well\":\"#1C1C1C\",\"white\":\"#C3C3C3\",\"black\":\"#0A0B0B\",\"hp\":\"#C62E2E\",\"money\":\"#D6BB27\",\"hack\":\"#ADFF2F\",\"combat\":\"#E8EDCD\",\"cha\":\"#8B5FAF\",\"int\":\"#537CC8\",\"rep\":\"#E8EDCD\",\"disabled\":\"#5AB5A5\",\"backgroundprimary\":\"#0C0D0E\",\"backgroundsecondary\":\"#121415\",\"button\":\"#252829\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}}}","VersionSave":"26","AllGangsSave":"","LastExportBonus":"1664905292189","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}